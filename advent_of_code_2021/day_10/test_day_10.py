from pytest import mark
from day_10 import (
    parse,
    filter_chunks,
    count_corrupted,
    main,
    count_completion
)


test_chunks = [
    ['[', '(', '{', '(', '<', '(', '(', ')', ')', '[', ']', '>', '[', '[', '{', '[', ']', '{', '<', '(', ')', '<', '>', '>'], 
    ['[', '(', '(', ')', '[', '<', '>', ']', ')', ']', '(', '{', '[', '<', '{', '<', '<', '[', ']', '>', '>', '('], 
    ['{', '(', '[', '(', '<', '{', '}', '[', '<', '>', '[', ']', '}', '>', '{', '[', ']', '{', '[', '(', '<', '(', ')', '>'],
    ['(', '(', '(', '(', '{', '<', '>', '}', '<', '{', '<', '{', '<', '>', '}', '{', '[', ']', '{', '[', ']', '{', '}'], 
    ['[', '[', '<', '[', '(', '[', ']', ')', ')', '<', '(', '[', '[', '{', '}', '[', '[', '(', ')', ']', ']', ']'], 
    ['[', '{', '[', '{', '(', '{', '}', ']', '{', '}', '}', '(', '[', '{', '[', '{', '{', '{', '}', '}', '(', '[', ']'], 
    ['{', '<', '[', '[', ']', ']', '>', '}', '<', '{', '[', '{', '[', '{', '[', ']', '{', '(', ')', '[', '[', '[', ']'], 
    ['[', '<', '(', '<', '(', '<', '(', '<', '{', '}', ')', ')', '>', '<', '(', '[', ']', '(', '[', ']', '(', ')'], 
    ['<', '{', '(', '[', '(', '[', '[', '(', '<', '>', '(', ')', ')', '{', '}', ']', '>', '(', '<', '<', '{', '{'], 
    ['<', '{', '(', '[', '{', '{', '}', '}', '[', '<', '[', '[', '[', '<', '>', '{', '}', ']', ']', ']', '>', '[', ']', ']']
    ]


def test_parse() -> None:
    assert parse("day_10_test.txt") == test_chunks


@mark.parametrize(
    ["chunks", "result"],
    [
        ('<([])><)', ')'),
        ('<}', '}'),
        ('<<<}', '}'),
        ('<><)', ')'),
        ('<[]<>}]', '}'),
        ('{([(<{}[<>[]}>{[]{[(<()>', '}'),
        ('[[<[([]))<([[{}[[()]]]', ')'),
        ('[{[{({}]{}}([{[{{{}}([]', ']'),
        ('[<(<(<(<{}))><([]([]()', ')'),
        ('<{([([[(<>()){}]>(<<{{', '>'),
    ],
)
def test_filter_invalid_chunks(chunks, result) -> None:
    assert filter_chunks(list(chunks)) == result


@mark.parametrize(
    ["chunks", "result"],
    [
        ('<><([', '[(<'),
        ('[({(<(())[]>[[{[]{<()<>>', '{{[[({(['),
        ('[(()[<>])]({[<{<<[]>>(', '({<[{('),
        ('<{([{{}}[<[[[<>{}]]]>[]]', '[({<'),
    ],
)
def test_filter_incomplete_chunks(chunks, result) -> None:
    result = list(result)
    assert filter_chunks(list(chunks)) == result
    

def test_count_corrupted() -> None:
    assert count_corrupted(test_chunks) == 26397


def test_count_completion() -> None:
    assert count_completion(test_chunks) == 288957

    
def test_main() -> None:
    assert main('day_10_test.txt') == (26397, 288957)